{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u5BFA\\u7530\\u601C\\u52A0\\\\AppData\\\\Roaming\\\\npm\\\\tictactoe\\\\src\\\\Game\\\\molecules\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from '../atoms/Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  // プレイヤーのターンを管理\n  const [player, changePlayer] = useState(true);\n  var boardLength = props.length;\n  var mathList = [];\n\n  if (isEmpty(boardLength)) {\n    boardLength = 0;\n    mathList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u3053\\u3053\\u306B\\u30B2\\u30FC\\u30E0\\u7248\\u304C\\u8868\\u793A\\u3055\\u308C\\u307E\\u3059\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 19\n    }, this)); // マス数を変更された場合は各マスの中をnullにし、winnerの中身もnullにする\n    // this.state.winner = null;\n    // this.state.squares = Array(boardLength*boardLength).fill(null);\n  } // 選択されたマス数分のボタンを作成する\n\n\n  for (var i = 0; i < boardLength; i++) {\n    var lineList = [];\n    var k = i * boardLength;\n\n    for (var j = 0; j < boardLength; j++) {\n      lineList.push( /*#__PURE__*/_jsxDEV(Square, {\n        id: k + j,\n        status: props.status,\n        setStatus: statuses => {\n          props.setStatus(statuses);\n        },\n        changePlayer: () => changePlayer(!player),\n        nowPlayer: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this));\n    }\n\n    mathList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: lineList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }, this));\n  } // 描画したゲームボードを返す\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Next player: \", player ? \"○\" : \"×\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), mathList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n} // 初回描画判定に使用\n\n\n_s(Board, \"ilp1h+R8aeB9KZhN6iCmKGzymb8=\");\n\n_c = Board;\n\nfunction isEmpty(obj) {\n  for (let i in obj) {\n    return false;\n  }\n\n  return true;\n}\n\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/寺田怜加/AppData/Roaming/npm/tictactoe/src/Game/molecules/Board.js"],"names":["React","useState","Square","Board","props","player","changePlayer","boardLength","length","mathList","isEmpty","push","i","lineList","k","j","status","statuses","setStatus","obj"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB;AACA,QAAM,CAACC,MAAD,EAASC,YAAT,IAAyBL,QAAQ,CAAC,IAAD,CAAvC;AAEA,MAAIM,WAAW,GAAGH,KAAK,CAACI,MAAxB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAKC,OAAO,CAACH,WAAD,CAAZ,EAA4B;AAC1BA,IAAAA,WAAW,GAAG,CAAd;AACAE,IAAAA,QAAQ,CAACE,IAAT,eAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd,EAF0B,CAG1B;AACA;AACA;AACD,GAZmB,CAcpB;;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,WAApB,EAAiCK,CAAC,EAAlC,EAAsC;AACpC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,CAAC,GAAGF,CAAC,GAACL,WAAV;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAApB,EAAiCQ,CAAC,EAAlC,EAAsC;AACpCF,MAAAA,QAAQ,CAACF,IAAT,eACE,QAAC,MAAD;AACE,QAAA,EAAE,EAAEG,CAAC,GAACC,CADR;AAEE,QAAA,MAAM,EAAEX,KAAK,CAACY,MAFhB;AAGE,QAAA,SAAS,EAAGC,QAAD,IAAY;AAACb,UAAAA,KAAK,CAACc,SAAN,CAAgBD,QAAhB;AAA0B,SAHpD;AAGsD,QAAA,YAAY,EAAE,MAAIX,YAAY,CAAC,CAACD,MAAF,CAHpF;AAIE,QAAA,SAAS,EAAEA;AAJb;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;;AACDI,IAAAA,QAAQ,CAACE,IAAT,eAAc;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAA4BE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAAd;AACD,GA7BmB,CA+BpB;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAA,kCAAmBR,MAAM,GAAE,GAAF,GAAM,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGI,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,C,CAED;;;GAxCSN,K;;KAAAA,K;;AAyCT,SAASO,OAAT,CAAiBS,GAAjB,EAAqB;AACnB,OAAI,IAAIP,CAAR,IAAaO,GAAb,EAAiB;AACf,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,eAAehB,KAAf","sourcesContent":["import React, {useState} from 'react';\nimport Square from '../atoms/Square';\n\nfunction Board(props) {\n  // プレイヤーのターンを管理\n  const [player, changePlayer] = useState(true);\n\n  var boardLength = props.length;\n  var mathList = [];\n  if ( isEmpty(boardLength) ) {\n    boardLength = 0;\n    mathList.push(<p>ここにゲーム版が表示されます。</p>);\n    // マス数を変更された場合は各マスの中をnullにし、winnerの中身もnullにする\n    // this.state.winner = null;\n    // this.state.squares = Array(boardLength*boardLength).fill(null);\n  }\n  \n  // 選択されたマス数分のボタンを作成する\n  for (var i = 0; i < boardLength; i++) {\n    var lineList = [];\n    var k = i*boardLength;\n    for (var j = 0; j < boardLength; j++) {\n      lineList.push(\n        <Square\n          id={k+j}\n          status={props.status}\n          setStatus={(statuses)=>{props.setStatus(statuses)}} changePlayer={()=>changePlayer(!player)}\n          nowPlayer={player}\n        />\n      );\n    }\n    mathList.push(<div className=\"board-row\">{lineList}</div>);\n  }\n\n  // 描画したゲームボードを返す\n  return (\n    <div className=\"Board\">\n      <div>Next player: {player? \"○\":\"×\"}</div>\n      {mathList}\n    </div>\n  );\n}\n\n// 初回描画判定に使用\nfunction isEmpty(obj){\n  for(let i in obj){\n    return false;\n  }\n  return true;\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}